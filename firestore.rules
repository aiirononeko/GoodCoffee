rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // ユーザー認証の関数
    function isAuthUser(auth, userId) {
      return auth != null && auth.uid == userId // 認証があり、uidとuserIdが一致する
    }

    // usersコレクション用: スキーマ検証の関数
    function isValidUserSchema(user) {
      return user.size() == 2 // ドキュメントは2つのプロパティを持つこと
        && 'name' in user && user.name is string // nameのプロパティがあり、nameの型がstring型
        && 'uid' in user && user.uid is string // uidのプロパティがあり、uidの型がstring型
    }

    // coffeeコレクション用: スキーマ検証の関数
    function isValidCoffeeSchema(coffee) {
      return coffee.size() == 20 // ドキュメントは19個のプロパティを持つこと
        && 'cleanCup' in coffee && coffee.cleanCup is int || coffee.cleanCup is float // cleanCupのプロパティがあり、cleanCupの型がnumber型
        && 'sweet' in coffee && coffee.sweet is int || coffee.sweet is float // sweetのプロパティがあり、sweetの型がnumber型
        && 'acidity' in coffee && coffee.acidity is int || coffee.acidity is float // acidityのプロパティがあり、acidityの型がnumber型
        && 'mouseFeel' in coffee && coffee.mouseFeel is int || coffee.mouseFeel is float // mouseFeelのプロパティがあり、mouseFeelの型がnumber型
        && 'flavor' in coffee && coffee.flavor is int || coffee.flavor is float // flavorのプロパティがあり、flavorの型がnumber型
        && 'afterTaste' in coffee && coffee.afterTaste is int || coffee.afterTaste is float // afterTasteのプロパティがあり、afterTasteの型がnumber型
        && 'balance' in coffee && coffee.balance is int || coffee.balance is float // balanceのプロパティがあり、balanceの型がnumber型
        && 'overAll' in coffee && coffee.overAll is int || coffee.overAll is float // overAllのプロパティがあり、overAllの型がnumber型
        && 'score' in coffee && coffee.score is int || coffee.score is float // scoreのプロパティがあり、scoreの型がnumber型
        && 'cupped' in coffee && coffee.cupped is string // cuppedのプロパティがあり、cuppedの型がstring型
        && 'dryAroma' in coffee && coffee.dryAroma is string // dryAromaのプロパティがあり、dryAromaの型がstring型
        && 'crustAroma' in coffee && coffee.crustAroma is string // crustAromaのプロパティがあり、crustAromaの型がstring型
        && 'breakAroma' in coffee && coffee.breakAroma is string // breakAromaのプロパティがあり、breakAromaの型がstring型
        && 'roastLevel' in coffee && coffee.roastLevel is string // roastLevelのプロパティがあり、roastLevelの型がstring型
        && 'country' in coffee && coffee.country is string // countryのプロパティがあり、countryの型がstring型
        && 'farmer' in coffee && coffee.farmer is string // farmerのプロパティがあり、farmerの型がstring型
        && 'elevation' in coffee && coffee.elevation is number // elevationのプロパティがあり、elevationの型がnumber型
        && 'process' in coffee && coffee.process is string // processのプロパティがあり、processの型がstring型
        && 'variety' in coffee && coffee.variety is string // varietyのプロパティがあり、varietyの型がstring型
        && 'uid' in coffee && coffee.uid is string // uidのプロパティがあり、uidの型がstring型
    }

    // usersコレクション用: 値のバリデーションの関数
    function isValidUserData(user) {
      return 1 <= user.name.size() && user.name.size() <= 30 // nameは1文字以上30文字以内であること
    }

    // coffeeコレクション用: 値のバリデーションの関数
    function isValidCoffeeData(coffee) {
      return 1 <= coffee.cupped.size() && coffee.cupped.size() <= 30 // cuppedは1文字以上30文字以内であること
        && 1 <= coffee.country.size() && coffee.country.size() <= 30 // countryは1文字以上30文字以内であること
        && 1 <= coffee.farmer.size() && coffee.farmer.size() <= 30 // farmerは1文字以上30文字以内であること
        && 1 <= coffee.process.size() && coffee.process.size() <= 30 // processは1文字以上30文字以内であること
        && 1 <= coffee.variety.size() && coffee.variety.size() <= 50 // varietyは1文字以上50文字以内であること
        && 0 <= coffee.elevation && coffee.elevation <= 3000 // elevationは0~3000以内であること
        && coffee.dryAroma == '強い' || coffee.dryAroma == '普通' || coffee.dryAroma == '弱い'
        && coffee.crustAroma == '強い' || coffee.crustAroma == '普通' || coffee.crustAroma == '弱い'
        && coffee.breakAroma == '強い' || coffee.breakAroma == '普通' || coffee.breakAroma == '弱い'
        && coffee.roastLevel == 'ダーク' || coffee.roastLevel == 'ミディアム' || coffee.roastLevel == 'ライト'
        && 0 <= coffee.cleanCup && coffee.cleanCup <= 8 // cleanCupは0~8以内であること
        && 0 <= coffee.sweet && coffee.sweet <= 8 // sweetは0~8以内であること
        && 0 <= coffee.acidity && coffee.acidity <= 8 // acidityは0~8以内であること
        && 0 <= coffee.mouseFeel && coffee.mouseFeel <= 8 // mouseFeelは0~8以内であること
        && 0 <= coffee.flavor && coffee.flavor <= 8 // flavorは0~8以内であること
        && 0 <= coffee.afterTaste && coffee.afterTaste <= 8 // afterTasteは0~8以内であること
        && 0 <= coffee.balance && coffee.balance <= 8 // balanceは0~8以内であること
        && 0 <= coffee.overAll && coffee.overAll <= 8 // overAllは0~8以内であること
        && 0 <= coffee.score && coffee.score <= 100 // scoreは0~100以内であること
        && 1 <= coffee.uid.size() && coffee.uid.size() <= 50 // uidは1文字以上50文字以内であること
    }

    // usersコレクション
    match /users/{userId} {
      allow read: if isAuthUser(request.auth, userId);
      allow create: if isAuthUser(request.auth, userId)
        && isValidUserSchema(request.resource.data) && isValidUserData(request.resource.data);
      allow update: if isAuthUser(request.auth, userId)
        && isValidUserSchema(request.resource.data) && isValidUserData(request.resource.data);
      allow delete: if isAuthUser(request.auth, userId);

      // cupping_resultsサブコレクション
      match /cupping_results/{resultId} {
        allow read: if request.auth.uid != null;
        allow create: if request.auth.uid != null;
        allow update: if request.auth.uid != null;
        allow delete: if request.auth.uid != null && request.auth.uid == resource.data.uid;
      }
    }

    // coffeeコレクション
    match /coffee/{resultId} {
      allow read: if true; // 誰でも閲覧可能
      allow create: if request.auth.uid != null
        && isValidCoffeeSchema(request.resource.data) && isValidCoffeeData(request.resource.data);
      allow update: if request.auth.uid != null
        && isValidCoffeeSchema(request.resource.data) && isValidCoffeeData(request.resource.data);
      allow delete: if request.auth.uid != null;
    }
  }
}